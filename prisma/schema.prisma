// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String        @unique
  walletAddress String?       @unique
  subscriptions Subscription[]
  repositories  TrackedRepository[]
  notifications NotificationSettings[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subscription {
  id                  String   @id @default(cuid())
  walletAddress       String   
  planType            String   // 'BASIC' or 'PRO'
  amount             Float
  startDate          DateTime @default(now())
  endDate            DateTime
  transactionSignature String  @unique
  status             String   @default("active") // 'active', 'expired'
  network            String   // 'mainnet', 'devnet'
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [walletAddress], references: [walletAddress])

  @@index([walletAddress, status])
}

model TrackedRepository {
  id          String   @id @default(cuid())
  userId      String
  repoUrl     String
  repoName    String
  lastChecked DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  notifications NotificationSettings?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@unique([userId, repoUrl])
}

model NotificationSettings {
  id          String   @id @default(cuid())
  userId      String
  repoId      String   @unique
  email       Boolean  @default(true)
  push        Boolean  @default(false)
  repository  TrackedRepository @relation(fields: [repoId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
